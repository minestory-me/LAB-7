
777777.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003700  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b0  080038b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038b8  080038b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000010  080038cc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  080038cc  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009db9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016bb  00000000  00000000  00029df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b40  00000000  00000000  0002b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a88  00000000  00000000  0002bff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015460  00000000  00000000  0002ca78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007709  00000000  00000000  00041ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008895d  00000000  00000000  000495e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1f3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fbc  00000000  00000000  000d1fbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003880 	.word	0x08003880

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003880 	.word	0x08003880

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	; 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000294:	f1a2 0201 	sub.w	r2, r2, #1
 8000298:	d1ed      	bne.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_uldivmod>:
 80003f4:	b953      	cbnz	r3, 800040c <__aeabi_uldivmod+0x18>
 80003f6:	b94a      	cbnz	r2, 800040c <__aeabi_uldivmod+0x18>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	bf08      	it	eq
 80003fc:	2800      	cmpeq	r0, #0
 80003fe:	bf1c      	itt	ne
 8000400:	f04f 31ff 	movne.w	r1, #4294967295
 8000404:	f04f 30ff 	movne.w	r0, #4294967295
 8000408:	f000 b972 	b.w	80006f0 <__aeabi_idiv0>
 800040c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000410:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000414:	f000 f806 	bl	8000424 <__udivmoddi4>
 8000418:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr

08000424 <__udivmoddi4>:
 8000424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000428:	9e08      	ldr	r6, [sp, #32]
 800042a:	4604      	mov	r4, r0
 800042c:	4688      	mov	r8, r1
 800042e:	2b00      	cmp	r3, #0
 8000430:	d14b      	bne.n	80004ca <__udivmoddi4+0xa6>
 8000432:	428a      	cmp	r2, r1
 8000434:	4615      	mov	r5, r2
 8000436:	d967      	bls.n	8000508 <__udivmoddi4+0xe4>
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	b14a      	cbz	r2, 8000452 <__udivmoddi4+0x2e>
 800043e:	f1c2 0720 	rsb	r7, r2, #32
 8000442:	fa01 f302 	lsl.w	r3, r1, r2
 8000446:	fa20 f707 	lsr.w	r7, r0, r7
 800044a:	4095      	lsls	r5, r2
 800044c:	ea47 0803 	orr.w	r8, r7, r3
 8000450:	4094      	lsls	r4, r2
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	0c23      	lsrs	r3, r4, #16
 8000458:	fbb8 f7fe 	udiv	r7, r8, lr
 800045c:	fa1f fc85 	uxth.w	ip, r5
 8000460:	fb0e 8817 	mls	r8, lr, r7, r8
 8000464:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000468:	fb07 f10c 	mul.w	r1, r7, ip
 800046c:	4299      	cmp	r1, r3
 800046e:	d909      	bls.n	8000484 <__udivmoddi4+0x60>
 8000470:	18eb      	adds	r3, r5, r3
 8000472:	f107 30ff 	add.w	r0, r7, #4294967295
 8000476:	f080 811b 	bcs.w	80006b0 <__udivmoddi4+0x28c>
 800047a:	4299      	cmp	r1, r3
 800047c:	f240 8118 	bls.w	80006b0 <__udivmoddi4+0x28c>
 8000480:	3f02      	subs	r7, #2
 8000482:	442b      	add	r3, r5
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f0fe 	udiv	r0, r3, lr
 800048c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb00 fc0c 	mul.w	ip, r0, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x8c>
 800049c:	192c      	adds	r4, r5, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	f080 8107 	bcs.w	80006b4 <__udivmoddi4+0x290>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	f240 8104 	bls.w	80006b4 <__udivmoddi4+0x290>
 80004ac:	3802      	subs	r0, #2
 80004ae:	442c      	add	r4, r5
 80004b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80004b4:	eba4 040c 	sub.w	r4, r4, ip
 80004b8:	2700      	movs	r7, #0
 80004ba:	b11e      	cbz	r6, 80004c4 <__udivmoddi4+0xa0>
 80004bc:	40d4      	lsrs	r4, r2
 80004be:	2300      	movs	r3, #0
 80004c0:	e9c6 4300 	strd	r4, r3, [r6]
 80004c4:	4639      	mov	r1, r7
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d909      	bls.n	80004e2 <__udivmoddi4+0xbe>
 80004ce:	2e00      	cmp	r6, #0
 80004d0:	f000 80eb 	beq.w	80006aa <__udivmoddi4+0x286>
 80004d4:	2700      	movs	r7, #0
 80004d6:	e9c6 0100 	strd	r0, r1, [r6]
 80004da:	4638      	mov	r0, r7
 80004dc:	4639      	mov	r1, r7
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	fab3 f783 	clz	r7, r3
 80004e6:	2f00      	cmp	r7, #0
 80004e8:	d147      	bne.n	800057a <__udivmoddi4+0x156>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d302      	bcc.n	80004f4 <__udivmoddi4+0xd0>
 80004ee:	4282      	cmp	r2, r0
 80004f0:	f200 80fa 	bhi.w	80006e8 <__udivmoddi4+0x2c4>
 80004f4:	1a84      	subs	r4, r0, r2
 80004f6:	eb61 0303 	sbc.w	r3, r1, r3
 80004fa:	2001      	movs	r0, #1
 80004fc:	4698      	mov	r8, r3
 80004fe:	2e00      	cmp	r6, #0
 8000500:	d0e0      	beq.n	80004c4 <__udivmoddi4+0xa0>
 8000502:	e9c6 4800 	strd	r4, r8, [r6]
 8000506:	e7dd      	b.n	80004c4 <__udivmoddi4+0xa0>
 8000508:	b902      	cbnz	r2, 800050c <__udivmoddi4+0xe8>
 800050a:	deff      	udf	#255	; 0xff
 800050c:	fab2 f282 	clz	r2, r2
 8000510:	2a00      	cmp	r2, #0
 8000512:	f040 808f 	bne.w	8000634 <__udivmoddi4+0x210>
 8000516:	1b49      	subs	r1, r1, r5
 8000518:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800051c:	fa1f f885 	uxth.w	r8, r5
 8000520:	2701      	movs	r7, #1
 8000522:	fbb1 fcfe 	udiv	ip, r1, lr
 8000526:	0c23      	lsrs	r3, r4, #16
 8000528:	fb0e 111c 	mls	r1, lr, ip, r1
 800052c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000530:	fb08 f10c 	mul.w	r1, r8, ip
 8000534:	4299      	cmp	r1, r3
 8000536:	d907      	bls.n	8000548 <__udivmoddi4+0x124>
 8000538:	18eb      	adds	r3, r5, r3
 800053a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800053e:	d202      	bcs.n	8000546 <__udivmoddi4+0x122>
 8000540:	4299      	cmp	r1, r3
 8000542:	f200 80cd 	bhi.w	80006e0 <__udivmoddi4+0x2bc>
 8000546:	4684      	mov	ip, r0
 8000548:	1a59      	subs	r1, r3, r1
 800054a:	b2a3      	uxth	r3, r4
 800054c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000550:	fb0e 1410 	mls	r4, lr, r0, r1
 8000554:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000558:	fb08 f800 	mul.w	r8, r8, r0
 800055c:	45a0      	cmp	r8, r4
 800055e:	d907      	bls.n	8000570 <__udivmoddi4+0x14c>
 8000560:	192c      	adds	r4, r5, r4
 8000562:	f100 33ff 	add.w	r3, r0, #4294967295
 8000566:	d202      	bcs.n	800056e <__udivmoddi4+0x14a>
 8000568:	45a0      	cmp	r8, r4
 800056a:	f200 80b6 	bhi.w	80006da <__udivmoddi4+0x2b6>
 800056e:	4618      	mov	r0, r3
 8000570:	eba4 0408 	sub.w	r4, r4, r8
 8000574:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000578:	e79f      	b.n	80004ba <__udivmoddi4+0x96>
 800057a:	f1c7 0c20 	rsb	ip, r7, #32
 800057e:	40bb      	lsls	r3, r7
 8000580:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000584:	ea4e 0e03 	orr.w	lr, lr, r3
 8000588:	fa01 f407 	lsl.w	r4, r1, r7
 800058c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000590:	fa21 f30c 	lsr.w	r3, r1, ip
 8000594:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000598:	4325      	orrs	r5, r4
 800059a:	fbb3 f9f8 	udiv	r9, r3, r8
 800059e:	0c2c      	lsrs	r4, r5, #16
 80005a0:	fb08 3319 	mls	r3, r8, r9, r3
 80005a4:	fa1f fa8e 	uxth.w	sl, lr
 80005a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80005ac:	fb09 f40a 	mul.w	r4, r9, sl
 80005b0:	429c      	cmp	r4, r3
 80005b2:	fa02 f207 	lsl.w	r2, r2, r7
 80005b6:	fa00 f107 	lsl.w	r1, r0, r7
 80005ba:	d90b      	bls.n	80005d4 <__udivmoddi4+0x1b0>
 80005bc:	eb1e 0303 	adds.w	r3, lr, r3
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	f080 8087 	bcs.w	80006d6 <__udivmoddi4+0x2b2>
 80005c8:	429c      	cmp	r4, r3
 80005ca:	f240 8084 	bls.w	80006d6 <__udivmoddi4+0x2b2>
 80005ce:	f1a9 0902 	sub.w	r9, r9, #2
 80005d2:	4473      	add	r3, lr
 80005d4:	1b1b      	subs	r3, r3, r4
 80005d6:	b2ad      	uxth	r5, r5
 80005d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80005dc:	fb08 3310 	mls	r3, r8, r0, r3
 80005e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80005e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80005e8:	45a2      	cmp	sl, r4
 80005ea:	d908      	bls.n	80005fe <__udivmoddi4+0x1da>
 80005ec:	eb1e 0404 	adds.w	r4, lr, r4
 80005f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80005f4:	d26b      	bcs.n	80006ce <__udivmoddi4+0x2aa>
 80005f6:	45a2      	cmp	sl, r4
 80005f8:	d969      	bls.n	80006ce <__udivmoddi4+0x2aa>
 80005fa:	3802      	subs	r0, #2
 80005fc:	4474      	add	r4, lr
 80005fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	eba4 040a 	sub.w	r4, r4, sl
 800060a:	454c      	cmp	r4, r9
 800060c:	46c2      	mov	sl, r8
 800060e:	464b      	mov	r3, r9
 8000610:	d354      	bcc.n	80006bc <__udivmoddi4+0x298>
 8000612:	d051      	beq.n	80006b8 <__udivmoddi4+0x294>
 8000614:	2e00      	cmp	r6, #0
 8000616:	d069      	beq.n	80006ec <__udivmoddi4+0x2c8>
 8000618:	ebb1 050a 	subs.w	r5, r1, sl
 800061c:	eb64 0403 	sbc.w	r4, r4, r3
 8000620:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000624:	40fd      	lsrs	r5, r7
 8000626:	40fc      	lsrs	r4, r7
 8000628:	ea4c 0505 	orr.w	r5, ip, r5
 800062c:	e9c6 5400 	strd	r5, r4, [r6]
 8000630:	2700      	movs	r7, #0
 8000632:	e747      	b.n	80004c4 <__udivmoddi4+0xa0>
 8000634:	f1c2 0320 	rsb	r3, r2, #32
 8000638:	fa20 f703 	lsr.w	r7, r0, r3
 800063c:	4095      	lsls	r5, r2
 800063e:	fa01 f002 	lsl.w	r0, r1, r2
 8000642:	fa21 f303 	lsr.w	r3, r1, r3
 8000646:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800064a:	4338      	orrs	r0, r7
 800064c:	0c01      	lsrs	r1, r0, #16
 800064e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000652:	fa1f f885 	uxth.w	r8, r5
 8000656:	fb0e 3317 	mls	r3, lr, r7, r3
 800065a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800065e:	fb07 f308 	mul.w	r3, r7, r8
 8000662:	428b      	cmp	r3, r1
 8000664:	fa04 f402 	lsl.w	r4, r4, r2
 8000668:	d907      	bls.n	800067a <__udivmoddi4+0x256>
 800066a:	1869      	adds	r1, r5, r1
 800066c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000670:	d22f      	bcs.n	80006d2 <__udivmoddi4+0x2ae>
 8000672:	428b      	cmp	r3, r1
 8000674:	d92d      	bls.n	80006d2 <__udivmoddi4+0x2ae>
 8000676:	3f02      	subs	r7, #2
 8000678:	4429      	add	r1, r5
 800067a:	1acb      	subs	r3, r1, r3
 800067c:	b281      	uxth	r1, r0
 800067e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000682:	fb0e 3310 	mls	r3, lr, r0, r3
 8000686:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800068a:	fb00 f308 	mul.w	r3, r0, r8
 800068e:	428b      	cmp	r3, r1
 8000690:	d907      	bls.n	80006a2 <__udivmoddi4+0x27e>
 8000692:	1869      	adds	r1, r5, r1
 8000694:	f100 3cff 	add.w	ip, r0, #4294967295
 8000698:	d217      	bcs.n	80006ca <__udivmoddi4+0x2a6>
 800069a:	428b      	cmp	r3, r1
 800069c:	d915      	bls.n	80006ca <__udivmoddi4+0x2a6>
 800069e:	3802      	subs	r0, #2
 80006a0:	4429      	add	r1, r5
 80006a2:	1ac9      	subs	r1, r1, r3
 80006a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80006a8:	e73b      	b.n	8000522 <__udivmoddi4+0xfe>
 80006aa:	4637      	mov	r7, r6
 80006ac:	4630      	mov	r0, r6
 80006ae:	e709      	b.n	80004c4 <__udivmoddi4+0xa0>
 80006b0:	4607      	mov	r7, r0
 80006b2:	e6e7      	b.n	8000484 <__udivmoddi4+0x60>
 80006b4:	4618      	mov	r0, r3
 80006b6:	e6fb      	b.n	80004b0 <__udivmoddi4+0x8c>
 80006b8:	4541      	cmp	r1, r8
 80006ba:	d2ab      	bcs.n	8000614 <__udivmoddi4+0x1f0>
 80006bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80006c0:	eb69 020e 	sbc.w	r2, r9, lr
 80006c4:	3801      	subs	r0, #1
 80006c6:	4613      	mov	r3, r2
 80006c8:	e7a4      	b.n	8000614 <__udivmoddi4+0x1f0>
 80006ca:	4660      	mov	r0, ip
 80006cc:	e7e9      	b.n	80006a2 <__udivmoddi4+0x27e>
 80006ce:	4618      	mov	r0, r3
 80006d0:	e795      	b.n	80005fe <__udivmoddi4+0x1da>
 80006d2:	4667      	mov	r7, ip
 80006d4:	e7d1      	b.n	800067a <__udivmoddi4+0x256>
 80006d6:	4681      	mov	r9, r0
 80006d8:	e77c      	b.n	80005d4 <__udivmoddi4+0x1b0>
 80006da:	3802      	subs	r0, #2
 80006dc:	442c      	add	r4, r5
 80006de:	e747      	b.n	8000570 <__udivmoddi4+0x14c>
 80006e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80006e4:	442b      	add	r3, r5
 80006e6:	e72f      	b.n	8000548 <__udivmoddi4+0x124>
 80006e8:	4638      	mov	r0, r7
 80006ea:	e708      	b.n	80004fe <__udivmoddi4+0xda>
 80006ec:	4637      	mov	r7, r6
 80006ee:	e6e9      	b.n	80004c4 <__udivmoddi4+0xa0>

080006f0 <__aeabi_idiv0>:
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80006f8:	ed2d 8b02 	vpush	{d8}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fe:	f000 fda7 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000702:	f000 f8a9 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f000 faad 	bl	8000c64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800070a:	f000 fa81 	bl	8000c10 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800070e:	f000 f90b 	bl	8000928 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000712:	f000 f961 	bl	80009d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000716:	f000 f9ab 	bl	8000a70 <MX_TIM3_Init>
  MX_TIM5_Init();
 800071a:	f000 fa2b 	bl	8000b74 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 800071e:	483f      	ldr	r0, [pc, #252]	; (800081c <main+0x128>)
 8000720:	f001 fd67 	bl	80021f2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000724:	213c      	movs	r1, #60	; 0x3c
 8000726:	483e      	ldr	r0, [pc, #248]	; (8000820 <main+0x12c>)
 8000728:	f001 fe80 	bl	800242c <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim3);
 800072c:	483d      	ldr	r0, [pc, #244]	; (8000824 <main+0x130>)
 800072e:	f001 fd3c 	bl	80021aa <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000732:	2108      	movs	r1, #8
 8000734:	483b      	ldr	r0, [pc, #236]	; (8000824 <main+0x130>)
 8000736:	f001 fdb5 	bl	80022a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800073a:	210c      	movs	r1, #12
 800073c:	4839      	ldr	r0, [pc, #228]	; (8000824 <main+0x130>)
 800073e:	f001 fdb1 	bl	80022a4 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//1 Khz Loop
		if (micros() - TimeOutputLoop >= 1000) {
 8000742:	f000 fb75 	bl	8000e30 <micros>
 8000746:	460a      	mov	r2, r1
 8000748:	4601      	mov	r1, r0
 800074a:	4b37      	ldr	r3, [pc, #220]	; (8000828 <main+0x134>)
 800074c:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000750:	460b      	mov	r3, r1
 8000752:	4614      	mov	r4, r2
 8000754:	ebb3 030b 	subs.w	r3, r3, fp
 8000758:	eb64 040c 	sbc.w	r4, r4, ip
 800075c:	f240 31e7 	movw	r1, #999	; 0x3e7
 8000760:	f04f 0200 	mov.w	r2, #0
 8000764:	42a2      	cmp	r2, r4
 8000766:	bf08      	it	eq
 8000768:	4299      	cmpeq	r1, r3
 800076a:	d229      	bcs.n	80007c0 <main+0xcc>
			TimeOutputLoop = micros();
 800076c:	f000 fb60 	bl	8000e30 <micros>
 8000770:	4603      	mov	r3, r0
 8000772:	460c      	mov	r4, r1
 8000774:	4a2c      	ldr	r2, [pc, #176]	; (8000828 <main+0x134>)
 8000776:	e9c2 3400 	strd	r3, r4, [r2]
			RPM = EncoderVel*60/3072;
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <main+0x138>)
 800077c:	edd3 7a00 	vldr	s15, [r3]
 8000780:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000830 <main+0x13c>
 8000784:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000788:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000834 <main+0x140>
 800078c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000790:	4b29      	ldr	r3, [pc, #164]	; (8000838 <main+0x144>)
 8000792:	edc3 7a00 	vstr	s15, [r3]
			Eror = rpm - RPM;
 8000796:	4b29      	ldr	r3, [pc, #164]	; (800083c <main+0x148>)
 8000798:	ed93 7a00 	vldr	s14, [r3]
 800079c:	4b26      	ldr	r3, [pc, #152]	; (8000838 <main+0x144>)
 800079e:	edd3 7a00 	vldr	s15, [r3]
 80007a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <main+0x14c>)
 80007a8:	edc3 7a00 	vstr	s15, [r3]
//				PWMOut4 = -PWMPID;
//			} else {
//				PWMOut3 = 0;
//				PWMOut4 = 0;
//			}
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, PWMOut3);
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <main+0x130>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a24      	ldr	r2, [pc, #144]	; (8000844 <main+0x150>)
 80007b2:	6812      	ldr	r2, [r2, #0]
 80007b4:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, PWMOut4);
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <main+0x130>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a23      	ldr	r2, [pc, #140]	; (8000848 <main+0x154>)
 80007bc:	6812      	ldr	r2, [r2, #0]
 80007be:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if (micros() - Timestamp_Encoder >= 100) {
 80007c0:	f000 fb36 	bl	8000e30 <micros>
 80007c4:	460a      	mov	r2, r1
 80007c6:	4601      	mov	r1, r0
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <main+0x158>)
 80007ca:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80007ce:	460b      	mov	r3, r1
 80007d0:	4614      	mov	r4, r2
 80007d2:	ebb3 030b 	subs.w	r3, r3, fp
 80007d6:	eb64 040c 	sbc.w	r4, r4, ip
 80007da:	2c00      	cmp	r4, #0
 80007dc:	bf08      	it	eq
 80007de:	2b64      	cmpeq	r3, #100	; 0x64
 80007e0:	d3af      	bcc.n	8000742 <main+0x4e>
			Timestamp_Encoder = micros();
 80007e2:	f000 fb25 	bl	8000e30 <micros>
 80007e6:	4603      	mov	r3, r0
 80007e8:	460c      	mov	r4, r1
 80007ea:	4a18      	ldr	r2, [pc, #96]	; (800084c <main+0x158>)
 80007ec:	e9c2 3400 	strd	r3, r4, [r2]
			EncoderVel = (EncoderVel * 1999 + EncoderVelocity_Update()) / 2000.0;
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <main+0x138>)
 80007f2:	edd3 7a00 	vldr	s15, [r3]
 80007f6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000850 <main+0x15c>
 80007fa:	ee27 8a87 	vmul.f32	s16, s15, s14
 80007fe:	f000 faa1 	bl	8000d44 <EncoderVelocity_Update>
 8000802:	eef0 7a40 	vmov.f32	s15, s0
 8000806:	ee38 7a27 	vadd.f32	s14, s16, s15
 800080a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000854 <main+0x160>
 800080e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <main+0x138>)
 8000814:	edc3 7a00 	vstr	s15, [r3]
		if (micros() - TimeOutputLoop >= 1000) {
 8000818:	e793      	b.n	8000742 <main+0x4e>
 800081a:	bf00      	nop
 800081c:	20000134 	.word	0x20000134
 8000820:	200000f4 	.word	0x200000f4
 8000824:	200000b4 	.word	0x200000b4
 8000828:	20000058 	.word	0x20000058
 800082c:	20000038 	.word	0x20000038
 8000830:	42700000 	.word	0x42700000
 8000834:	45400000 	.word	0x45400000
 8000838:	20000060 	.word	0x20000060
 800083c:	20000048 	.word	0x20000048
 8000840:	20000064 	.word	0x20000064
 8000844:	2000004c 	.word	0x2000004c
 8000848:	20000050 	.word	0x20000050
 800084c:	20000040 	.word	0x20000040
 8000850:	44f9e000 	.word	0x44f9e000
 8000854:	44fa0000 	.word	0x44fa0000

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f003 f802 	bl	8003870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <SystemClock_Config+0xc8>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a26      	ldr	r2, [pc, #152]	; (8000920 <SystemClock_Config+0xc8>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <SystemClock_Config+0xc8>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <SystemClock_Config+0xcc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a20      	ldr	r2, [pc, #128]	; (8000924 <SystemClock_Config+0xcc>)
 80008a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <SystemClock_Config+0xcc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2310      	movs	r3, #16
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c8:	2308      	movs	r3, #8
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008cc:	2364      	movs	r3, #100	; 0x64
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d4:	2304      	movs	r3, #4
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 ffd7 	bl	8001890 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e8:	f000 fabc 	bl	8000e64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2302      	movs	r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2103      	movs	r1, #3
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fa31 	bl	8001d70 <HAL_RCC_ClockConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000914:	f000 faa6 	bl	8000e64 <Error_Handler>
  }
}
 8000918:	bf00      	nop
 800091a:	3750      	adds	r7, #80	; 0x50
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2224      	movs	r2, #36	; 0x24
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f002 ff9a 	bl	8003870 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <MX_TIM1_Init+0xa8>)
 8000946:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <MX_TIM1_Init+0xac>)
 8000948:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_TIM1_Init+0xa8>)
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <MX_TIM1_Init+0xa8>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3071;
 8000956:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <MX_TIM1_Init+0xa8>)
 8000958:	f640 32ff 	movw	r2, #3071	; 0xbff
 800095c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_TIM1_Init+0xa8>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_TIM1_Init+0xa8>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_TIM1_Init+0xa8>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000970:	2303      	movs	r3, #3
 8000972:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000978:	2301      	movs	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000988:	2301      	movs	r3, #1
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4619      	mov	r1, r3
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_TIM1_Init+0xa8>)
 800099c:	f001 fcb4 	bl	8002308 <HAL_TIM_Encoder_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80009a6:	f000 fa5d 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_TIM1_Init+0xa8>)
 80009b8:	f002 faea 	bl	8002f90 <HAL_TIMEx_MasterConfigSynchronization>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80009c2:	f000 fa4f 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	3730      	adds	r7, #48	; 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000f4 	.word	0x200000f4
 80009d4:	40010000 	.word	0x40010000

080009d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	463b      	mov	r3, r7
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_TIM2_Init+0x94>)
 80009f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_TIM2_Init+0x94>)
 80009fe:	2263      	movs	r2, #99	; 0x63
 8000a00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_TIM2_Init+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_TIM2_Init+0x94>)
 8000a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_TIM2_Init+0x94>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_TIM2_Init+0x94>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a1c:	4813      	ldr	r0, [pc, #76]	; (8000a6c <MX_TIM2_Init+0x94>)
 8000a1e:	f001 fb99 	bl	8002154 <HAL_TIM_Base_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a28:	f000 fa1c 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	4619      	mov	r1, r3
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_TIM2_Init+0x94>)
 8000a3a:	f001 fefd 	bl	8002838 <HAL_TIM_ConfigClockSource>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a44:	f000 fa0e 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_TIM2_Init+0x94>)
 8000a56:	f002 fa9b 	bl	8002f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a60:	f000 fa00 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000134 	.word	0x20000134

08000a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	f107 0320 	add.w	r3, r7, #32
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
 8000a9c:	615a      	str	r2, [r3, #20]
 8000a9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aa0:	4b32      	ldr	r3, [pc, #200]	; (8000b6c <MX_TIM3_Init+0xfc>)
 8000aa2:	4a33      	ldr	r2, [pc, #204]	; (8000b70 <MX_TIM3_Init+0x100>)
 8000aa4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000aa6:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <MX_TIM3_Init+0xfc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <MX_TIM3_Init+0xfc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30720;
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	; (8000b6c <MX_TIM3_Init+0xfc>)
 8000ab4:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000ab8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <MX_TIM3_Init+0xfc>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <MX_TIM3_Init+0xfc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ac6:	4829      	ldr	r0, [pc, #164]	; (8000b6c <MX_TIM3_Init+0xfc>)
 8000ac8:	f001 fb44 	bl	8002154 <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ad2:	f000 f9c7 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4822      	ldr	r0, [pc, #136]	; (8000b6c <MX_TIM3_Init+0xfc>)
 8000ae4:	f001 fea8 	bl	8002838 <HAL_TIM_ConfigClockSource>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000aee:	f000 f9b9 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000af2:	481e      	ldr	r0, [pc, #120]	; (8000b6c <MX_TIM3_Init+0xfc>)
 8000af4:	f001 fba1 	bl	800223a <HAL_TIM_PWM_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000afe:	f000 f9b1 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b0a:	f107 0320 	add.w	r3, r7, #32
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4816      	ldr	r0, [pc, #88]	; (8000b6c <MX_TIM3_Init+0xfc>)
 8000b12:	f002 fa3d 	bl	8002f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b1c:	f000 f9a2 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b20:	2360      	movs	r3, #96	; 0x60
 8000b22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2208      	movs	r2, #8
 8000b34:	4619      	mov	r1, r3
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_TIM3_Init+0xfc>)
 8000b38:	f001 fdb8 	bl	80026ac <HAL_TIM_PWM_ConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b42:	f000 f98f 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	220c      	movs	r2, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4807      	ldr	r0, [pc, #28]	; (8000b6c <MX_TIM3_Init+0xfc>)
 8000b4e:	f001 fdad 	bl	80026ac <HAL_TIM_PWM_ConfigChannel>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000b58:	f000 f984 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <MX_TIM3_Init+0xfc>)
 8000b5e:	f000 fa77 	bl	8001050 <HAL_TIM_MspPostInit>

}
 8000b62:	bf00      	nop
 8000b64:	3738      	adds	r7, #56	; 0x38
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000b4 	.word	0x200000b4
 8000b70:	40000400 	.word	0x40000400

08000b74 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_TIM5_Init+0x90>)
 8000b92:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <MX_TIM5_Init+0x94>)
 8000b94:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_TIM5_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_TIM5_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000000;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <MX_TIM5_Init+0x90>)
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <MX_TIM5_Init+0x98>)
 8000ba6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_TIM5_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MX_TIM5_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000bb4:	4813      	ldr	r0, [pc, #76]	; (8000c04 <MX_TIM5_Init+0x90>)
 8000bb6:	f001 facd 	bl	8002154 <HAL_TIM_Base_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8000bc0:	f000 f950 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <MX_TIM5_Init+0x90>)
 8000bd2:	f001 fe31 	bl	8002838 <HAL_TIM_ConfigClockSource>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8000bdc:	f000 f942 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000be8:	463b      	mov	r3, r7
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_TIM5_Init+0x90>)
 8000bee:	f002 f9cf 	bl	8002f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8000bf8:	f000 f934 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000074 	.word	0x20000074
 8000c08:	40000c00 	.word	0x40000c00
 8000c0c:	000f4240 	.word	0x000f4240

08000c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <MX_USART2_UART_Init+0x50>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c48:	f002 fa24 	bl	8003094 <HAL_UART_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c52:	f000 f907 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000174 	.word	0x20000174
 8000c60:	40004400 	.word	0x40004400

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <MX_GPIO_Init+0xd0>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a2c      	ldr	r2, [pc, #176]	; (8000d34 <MX_GPIO_Init+0xd0>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <MX_GPIO_Init+0xd0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <MX_GPIO_Init+0xd0>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a25      	ldr	r2, [pc, #148]	; (8000d34 <MX_GPIO_Init+0xd0>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <MX_GPIO_Init+0xd0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <MX_GPIO_Init+0xd0>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <MX_GPIO_Init+0xd0>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <MX_GPIO_Init+0xd0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_GPIO_Init+0xd0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <MX_GPIO_Init+0xd0>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_GPIO_Init+0xd0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2120      	movs	r1, #32
 8000cee:	4812      	ldr	r0, [pc, #72]	; (8000d38 <MX_GPIO_Init+0xd4>)
 8000cf0:	f000 fdb4 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_GPIO_Init+0xd8>)
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_GPIO_Init+0xdc>)
 8000d0a:	f000 fc25 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d0e:	2320      	movs	r3, #32
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_GPIO_Init+0xd4>)
 8000d26:	f000 fc17 	bl	8001558 <HAL_GPIO_Init>

}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	10210000 	.word	0x10210000
 8000d40:	40020800 	.word	0x40020800

08000d44 <EncoderVelocity_Update>:
/* USER CODE BEGIN 4 */
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 1536
#define  MAX_ENCODER_PERIOD 3072

float EncoderVelocity_Update() {
 8000d44:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000d48:	ed2d 8b02 	vpush	{d8}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8000d50:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <EncoderVelocity_Update+0xa4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d56:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8000d58:	f000 f86a 	bl	8000e30 <micros>
 8000d5c:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8000d60:	4b22      	ldr	r3, [pc, #136]	; (8000dec <EncoderVelocity_Update+0xa8>)
 8000d62:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000d66:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4614      	mov	r4, r2
 8000d6e:	ebb3 030b 	subs.w	r3, r3, fp
 8000d72:	eb64 040c 	sbc.w	r4, r4, ip
 8000d76:	e9c7 3400 	strd	r3, r4, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <EncoderVelocity_Update+0xac>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW) {
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000d8a:	db04      	blt.n	8000d96 <EncoderVelocity_Update+0x52>
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e008      	b.n	8000da8 <EncoderVelocity_Update+0x64>
	} else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW) {
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	425b      	negs	r3, r3
 8000d9a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000d9e:	db03      	blt.n	8000da8 <EncoderVelocity_Update+0x64>
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000da6:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8000da8:	4a11      	ldr	r2, [pc, #68]	; (8000df0 <EncoderVelocity_Update+0xac>)
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8000dae:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <EncoderVelocity_Update+0xa8>)
 8000db0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000db4:	e9c2 3400 	strd	r3, r4, [r2]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <EncoderVelocity_Update+0xb0>)
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000dc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000dcc:	f7ff facc 	bl	8000368 <__aeabi_ul2f>
 8000dd0:	ee07 0a10 	vmov	s14, r0
 8000dd4:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 8000dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	ecbd 8b02 	vpop	{d8}
 8000de4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8000de8:	200000f4 	.word	0x200000f4
 8000dec:	20000068 	.word	0x20000068
 8000df0:	20000070 	.word	0x20000070
 8000df4:	000f4240 	.word	0x000f4240

08000df8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000df8:	b490      	push	{r4, r7}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d109      	bne.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0x24>
		_micros += 4294967295;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e0a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000e0e:	f111 33ff 	adds.w	r3, r1, #4294967295
 8000e12:	f142 0400 	adc.w	r4, r2, #0
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e18:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc90      	pop	{r4, r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000134 	.word	0x20000134
 8000e2c:	20000030 	.word	0x20000030

08000e30 <micros>:
uint64_t micros() {
 8000e30:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8000e34:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <micros+0x2c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <micros+0x30>)
 8000e44:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000e48:	eb1b 0301 	adds.w	r3, fp, r1
 8000e4c:	eb4c 0402 	adc.w	r4, ip, r2
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	4621      	mov	r1, r4
 8000e54:	46bd      	mov	sp, r7
 8000e56:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8000e5a:	4770      	bx	lr
 8000e5c:	20000134 	.word	0x20000134
 8000e60:	20000030 	.word	0x20000030

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e6a:	e7fe      	b.n	8000e6a <Error_Handler+0x6>

08000e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eaa:	2007      	movs	r0, #7
 8000eac:	f000 fb12 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800

08000ebc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a19      	ldr	r2, [pc, #100]	; (8000f40 <HAL_TIM_Encoder_MspInit+0x84>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d12c      	bne.n	8000f38 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000f34:	f000 fb10 	bl	8001558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40010000 	.word	0x40010000
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000

08000f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08c      	sub	sp, #48	; 0x30
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f6c:	d135      	bne.n	8000fda <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
 8000f72:	4b33      	ldr	r3, [pc, #204]	; (8001040 <HAL_TIM_Base_MspInit+0xf4>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a32      	ldr	r2, [pc, #200]	; (8001040 <HAL_TIM_Base_MspInit+0xf4>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b30      	ldr	r3, [pc, #192]	; (8001040 <HAL_TIM_Base_MspInit+0xf4>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <HAL_TIM_Base_MspInit+0xf4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a2b      	ldr	r2, [pc, #172]	; (8001040 <HAL_TIM_Base_MspInit+0xf4>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <HAL_TIM_Base_MspInit+0xf4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4820      	ldr	r0, [pc, #128]	; (8001044 <HAL_TIM_Base_MspInit+0xf8>)
 8000fc4:	f000 fac8 	bl	8001558 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	201c      	movs	r0, #28
 8000fce:	f000 fa8c 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fd2:	201c      	movs	r0, #28
 8000fd4:	f000 faa5 	bl	8001522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000fd8:	e02e      	b.n	8001038 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM3)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a1a      	ldr	r2, [pc, #104]	; (8001048 <HAL_TIM_Base_MspInit+0xfc>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d116      	bne.n	8001012 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_TIM_Base_MspInit+0xf4>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <HAL_TIM_Base_MspInit+0xf4>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_TIM_Base_MspInit+0xf4>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	201d      	movs	r0, #29
 8001006:	f000 fa70 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800100a:	201d      	movs	r0, #29
 800100c:	f000 fa89 	bl	8001522 <HAL_NVIC_EnableIRQ>
}
 8001010:	e012      	b.n	8001038 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM5)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a0d      	ldr	r2, [pc, #52]	; (800104c <HAL_TIM_Base_MspInit+0x100>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d10d      	bne.n	8001038 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <HAL_TIM_Base_MspInit+0xf4>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_TIM_Base_MspInit+0xf4>)
 8001026:	f043 0308 	orr.w	r3, r3, #8
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <HAL_TIM_Base_MspInit+0xf4>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	bf00      	nop
 800103a:	3730      	adds	r7, #48	; 0x30
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400
 8001048:	40000400 	.word	0x40000400
 800104c:	40000c00 	.word	0x40000c00

08001050 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <HAL_TIM_MspPostInit+0x68>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d11e      	bne.n	80010b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_TIM_MspPostInit+0x6c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <HAL_TIM_MspPostInit+0x6c>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_TIM_MspPostInit+0x6c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800108e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001092:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <HAL_TIM_MspPostInit+0x70>)
 80010ac:	f000 fa54 	bl	8001558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40000400 	.word	0x40000400
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020800 	.word	0x40020800

080010c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a19      	ldr	r2, [pc, #100]	; (8001148 <HAL_UART_MspInit+0x84>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d12b      	bne.n	800113e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_UART_MspInit+0x88>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_UART_MspInit+0x88>)
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_UART_MspInit+0x88>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_UART_MspInit+0x88>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <HAL_UART_MspInit+0x88>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_UART_MspInit+0x88>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800111e:	230c      	movs	r3, #12
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112e:	2307      	movs	r3, #7
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <HAL_UART_MspInit+0x8c>)
 800113a:	f000 fa0d 	bl	8001558 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	; 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40004400 	.word	0x40004400
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000

08001154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <NMI_Handler+0x4>

0800115a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <HardFault_Handler+0x4>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <MemManage_Handler+0x4>

08001166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <UsageFault_Handler+0x4>

08001172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a0:	f000 f8a8 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <TIM2_IRQHandler+0x10>)
 80011ae:	f001 f974 	bl	800249a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000134 	.word	0x20000134

080011bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM3_IRQHandler+0x10>)
 80011c2:	f001 f96a 	bl	800249a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200000b4 	.word	0x200000b4

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <SystemInit+0x28>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011da:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <SystemInit+0x28>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <SystemInit+0x28>)
 80011e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ea:	609a      	str	r2, [r3, #8]
#endif
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001200:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001202:	e003      	b.n	800120c <LoopCopyDataInit>

08001204 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001206:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001208:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800120a:	3104      	adds	r1, #4

0800120c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800120c:	480b      	ldr	r0, [pc, #44]	; (800123c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001210:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001212:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001214:	d3f6      	bcc.n	8001204 <CopyDataInit>
  ldr  r2, =_sbss
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001218:	e002      	b.n	8001220 <LoopFillZerobss>

0800121a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800121a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800121c:	f842 3b04 	str.w	r3, [r2], #4

08001220 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001222:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001224:	d3f9      	bcc.n	800121a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001226:	f7ff ffd3 	bl	80011d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122a:	f002 fafd 	bl	8003828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff fa61 	bl	80006f4 <main>
  bx  lr    
 8001232:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001234:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001238:	080038c0 	.word	0x080038c0
  ldr  r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001240:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001244:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001248:	200001b8 	.word	0x200001b8

0800124c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <HAL_Init+0x40>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_Init+0x40>)
 8001266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_Init+0x40>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f92b 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	2000      	movs	r0, #0
 8001280:	f000 f808 	bl	8001294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff fdf2 	bl	8000e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x54>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x58>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f943 	bl	800153e <HAL_SYSTICK_Config>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e00e      	b.n	80012e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d80a      	bhi.n	80012de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f000 f90b 	bl	80014ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d4:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <HAL_InitTick+0x5c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000004 	.word	0x20000004

080012f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x20>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x24>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a04      	ldr	r2, [pc, #16]	; (8001318 <HAL_IncTick+0x24>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008
 8001318:	200001b4 	.word	0x200001b4

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_GetTick+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	200001b4 	.word	0x200001b4

08001334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001350:	4013      	ands	r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800135c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	60d3      	str	r3, [r2, #12]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <__NVIC_GetPriorityGrouping+0x18>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	f003 0307 	and.w	r3, r3, #7
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db0b      	blt.n	80013c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	f003 021f 	and.w	r2, r3, #31
 80013b0:	4907      	ldr	r1, [pc, #28]	; (80013d0 <__NVIC_EnableIRQ+0x38>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	095b      	lsrs	r3, r3, #5
 80013b8:	2001      	movs	r0, #1
 80013ba:	fa00 f202 	lsl.w	r2, r0, r2
 80013be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000e100 	.word	0xe000e100

080013d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db0a      	blt.n	80013fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	490c      	ldr	r1, [pc, #48]	; (8001420 <__NVIC_SetPriority+0x4c>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	440b      	add	r3, r1
 80013f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013fc:	e00a      	b.n	8001414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <__NVIC_SetPriority+0x50>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	3b04      	subs	r3, #4
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	440b      	add	r3, r1
 8001412:	761a      	strb	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f1c3 0307 	rsb	r3, r3, #7
 8001442:	2b04      	cmp	r3, #4
 8001444:	bf28      	it	cs
 8001446:	2304      	movcs	r3, #4
 8001448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3304      	adds	r3, #4
 800144e:	2b06      	cmp	r3, #6
 8001450:	d902      	bls.n	8001458 <NVIC_EncodePriority+0x30>
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3b03      	subs	r3, #3
 8001456:	e000      	b.n	800145a <NVIC_EncodePriority+0x32>
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	f04f 32ff 	mov.w	r2, #4294967295
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001470:	f04f 31ff 	mov.w	r1, #4294967295
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43d9      	mvns	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	4313      	orrs	r3, r2
         );
}
 8001482:	4618      	mov	r0, r3
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f7ff ff8e 	bl	80013d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff29 	bl	8001334 <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff3e 	bl	800137c <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff8e 	bl	8001428 <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5d 	bl	80013d4 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff31 	bl	8001398 <__NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffa2 	bl	8001490 <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	e159      	b.n	8001828 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001574:	2201      	movs	r2, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	429a      	cmp	r2, r3
 800158e:	f040 8148 	bne.w	8001822 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d00b      	beq.n	80015b2 <HAL_GPIO_Init+0x5a>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d007      	beq.n	80015b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a6:	2b11      	cmp	r3, #17
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b12      	cmp	r3, #18
 80015b0:	d130      	bne.n	8001614 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	2203      	movs	r2, #3
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e8:	2201      	movs	r2, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	f003 0201 	and.w	r2, r3, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0xfc>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b12      	cmp	r3, #18
 8001652:	d123      	bne.n	800169c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	69b9      	ldr	r1, [r7, #24]
 8001698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0203 	and.w	r2, r3, #3
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80a2 	beq.w	8001822 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b56      	ldr	r3, [pc, #344]	; (800183c <HAL_GPIO_Init+0x2e4>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a55      	ldr	r2, [pc, #340]	; (800183c <HAL_GPIO_Init+0x2e4>)
 80016e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b53      	ldr	r3, [pc, #332]	; (800183c <HAL_GPIO_Init+0x2e4>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016fa:	4a51      	ldr	r2, [pc, #324]	; (8001840 <HAL_GPIO_Init+0x2e8>)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3302      	adds	r3, #2
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a48      	ldr	r2, [pc, #288]	; (8001844 <HAL_GPIO_Init+0x2ec>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d019      	beq.n	800175a <HAL_GPIO_Init+0x202>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a47      	ldr	r2, [pc, #284]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d013      	beq.n	8001756 <HAL_GPIO_Init+0x1fe>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a46      	ldr	r2, [pc, #280]	; (800184c <HAL_GPIO_Init+0x2f4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00d      	beq.n	8001752 <HAL_GPIO_Init+0x1fa>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a45      	ldr	r2, [pc, #276]	; (8001850 <HAL_GPIO_Init+0x2f8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d007      	beq.n	800174e <HAL_GPIO_Init+0x1f6>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a44      	ldr	r2, [pc, #272]	; (8001854 <HAL_GPIO_Init+0x2fc>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_GPIO_Init+0x1f2>
 8001746:	2304      	movs	r3, #4
 8001748:	e008      	b.n	800175c <HAL_GPIO_Init+0x204>
 800174a:	2307      	movs	r3, #7
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x204>
 800174e:	2303      	movs	r3, #3
 8001750:	e004      	b.n	800175c <HAL_GPIO_Init+0x204>
 8001752:	2302      	movs	r3, #2
 8001754:	e002      	b.n	800175c <HAL_GPIO_Init+0x204>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x204>
 800175a:	2300      	movs	r3, #0
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	f002 0203 	and.w	r2, r2, #3
 8001762:	0092      	lsls	r2, r2, #2
 8001764:	4093      	lsls	r3, r2
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800176c:	4934      	ldr	r1, [pc, #208]	; (8001840 <HAL_GPIO_Init+0x2e8>)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	3302      	adds	r3, #2
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177a:	4b37      	ldr	r3, [pc, #220]	; (8001858 <HAL_GPIO_Init+0x300>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800179e:	4a2e      	ldr	r2, [pc, #184]	; (8001858 <HAL_GPIO_Init+0x300>)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <HAL_GPIO_Init+0x300>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c8:	4a23      	ldr	r2, [pc, #140]	; (8001858 <HAL_GPIO_Init+0x300>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <HAL_GPIO_Init+0x300>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017f2:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_GPIO_Init+0x300>)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_GPIO_Init+0x300>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800181c:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_GPIO_Init+0x300>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3301      	adds	r3, #1
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b0f      	cmp	r3, #15
 800182c:	f67f aea2 	bls.w	8001574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001830:	bf00      	nop
 8001832:	3724      	adds	r7, #36	; 0x24
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40023800 	.word	0x40023800
 8001840:	40013800 	.word	0x40013800
 8001844:	40020000 	.word	0x40020000
 8001848:	40020400 	.word	0x40020400
 800184c:	40020800 	.word	0x40020800
 8001850:	40020c00 	.word	0x40020c00
 8001854:	40021000 	.word	0x40021000
 8001858:	40013c00 	.word	0x40013c00

0800185c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001878:	e003      	b.n	8001882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	041a      	lsls	r2, r3, #16
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	619a      	str	r2, [r3, #24]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e25b      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d075      	beq.n	800199a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ae:	4ba3      	ldr	r3, [pc, #652]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d00c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ba:	4ba0      	ldr	r3, [pc, #640]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d112      	bne.n	80018ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c6:	4b9d      	ldr	r3, [pc, #628]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018d2:	d10b      	bne.n	80018ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	4b99      	ldr	r3, [pc, #612]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d05b      	beq.n	8001998 <HAL_RCC_OscConfig+0x108>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d157      	bne.n	8001998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e236      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f4:	d106      	bne.n	8001904 <HAL_RCC_OscConfig+0x74>
 80018f6:	4b91      	ldr	r3, [pc, #580]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a90      	ldr	r2, [pc, #576]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e01d      	b.n	8001940 <HAL_RCC_OscConfig+0xb0>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x98>
 800190e:	4b8b      	ldr	r3, [pc, #556]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a8a      	ldr	r2, [pc, #552]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b88      	ldr	r3, [pc, #544]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a87      	ldr	r2, [pc, #540]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0xb0>
 8001928:	4b84      	ldr	r3, [pc, #528]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a83      	ldr	r2, [pc, #524]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800192e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b81      	ldr	r3, [pc, #516]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a80      	ldr	r2, [pc, #512]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d013      	beq.n	8001970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fce8 	bl	800131c <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fce4 	bl	800131c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1fb      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	4b76      	ldr	r3, [pc, #472]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0xc0>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fcd4 	bl	800131c <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fcd0 	bl	800131c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1e7      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	4b6c      	ldr	r3, [pc, #432]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0xe8>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d063      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019a6:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b2:	4b62      	ldr	r3, [pc, #392]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d11c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019be:	4b5f      	ldr	r3, [pc, #380]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d116      	bne.n	80019f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	4b5c      	ldr	r3, [pc, #368]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_RCC_OscConfig+0x152>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e1bb      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4b56      	ldr	r3, [pc, #344]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4952      	ldr	r1, [pc, #328]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	e03a      	b.n	8001a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a00:	4b4f      	ldr	r3, [pc, #316]	; (8001b40 <HAL_RCC_OscConfig+0x2b0>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a06:	f7ff fc89 	bl	800131c <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fc85 	bl	800131c <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e19c      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2c:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4940      	ldr	r1, [pc, #256]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
 8001a40:	e015      	b.n	8001a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a42:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <HAL_RCC_OscConfig+0x2b0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff fc68 	bl	800131c <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a50:	f7ff fc64 	bl	800131c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e17b      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d030      	beq.n	8001adc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d016      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a82:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_RCC_OscConfig+0x2b4>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff fc48 	bl	800131c <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a90:	f7ff fc44 	bl	800131c <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e15b      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x200>
 8001aae:	e015      	b.n	8001adc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_OscConfig+0x2b4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fc31 	bl	800131c <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001abe:	f7ff fc2d 	bl	800131c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e144      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a0 	beq.w	8001c2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10f      	bne.n	8001b1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b16:	2301      	movs	r3, #1
 8001b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_OscConfig+0x2b8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d121      	bne.n	8001b6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_RCC_OscConfig+0x2b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_RCC_OscConfig+0x2b8>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b32:	f7ff fbf3 	bl	800131c <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	e011      	b.n	8001b5e <HAL_RCC_OscConfig+0x2ce>
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	42470000 	.word	0x42470000
 8001b44:	42470e80 	.word	0x42470e80
 8001b48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4c:	f7ff fbe6 	bl	800131c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e0fd      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5e:	4b81      	ldr	r3, [pc, #516]	; (8001d64 <HAL_RCC_OscConfig+0x4d4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d106      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2f0>
 8001b72:	4b7d      	ldr	r3, [pc, #500]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	4a7c      	ldr	r2, [pc, #496]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7e:	e01c      	b.n	8001bba <HAL_RCC_OscConfig+0x32a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x312>
 8001b88:	4b77      	ldr	r3, [pc, #476]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a76      	ldr	r2, [pc, #472]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	4b74      	ldr	r3, [pc, #464]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a73      	ldr	r2, [pc, #460]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba0:	e00b      	b.n	8001bba <HAL_RCC_OscConfig+0x32a>
 8001ba2:	4b71      	ldr	r3, [pc, #452]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	4a70      	ldr	r2, [pc, #448]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6713      	str	r3, [r2, #112]	; 0x70
 8001bae:	4b6e      	ldr	r3, [pc, #440]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	4a6d      	ldr	r2, [pc, #436]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d015      	beq.n	8001bee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fbab 	bl	800131c <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7ff fba7 	bl	800131c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0bc      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be0:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ee      	beq.n	8001bca <HAL_RCC_OscConfig+0x33a>
 8001bec:	e014      	b.n	8001c18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7ff fb95 	bl	800131c <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7ff fb91 	bl	800131c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e0a6      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0c:	4b56      	ldr	r3, [pc, #344]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1ee      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d105      	bne.n	8001c2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1e:	4b52      	ldr	r3, [pc, #328]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a51      	ldr	r2, [pc, #324]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8092 	beq.w	8001d58 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c34:	4b4c      	ldr	r3, [pc, #304]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d05c      	beq.n	8001cfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d141      	bne.n	8001ccc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c48:	4b48      	ldr	r3, [pc, #288]	; (8001d6c <HAL_RCC_OscConfig+0x4dc>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fb65 	bl	800131c <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c56:	f7ff fb61 	bl	800131c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e078      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c68:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f0      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69da      	ldr	r2, [r3, #28]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	019b      	lsls	r3, r3, #6
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	041b      	lsls	r3, r3, #16
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	061b      	lsls	r3, r3, #24
 8001c98:	4933      	ldr	r1, [pc, #204]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9e:	4b33      	ldr	r3, [pc, #204]	; (8001d6c <HAL_RCC_OscConfig+0x4dc>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fb3a 	bl	800131c <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff fb36 	bl	800131c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e04d      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x41c>
 8001cca:	e045      	b.n	8001d58 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <HAL_RCC_OscConfig+0x4dc>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fb23 	bl	800131c <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff fb1f 	bl	800131c <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e036      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f0      	bne.n	8001cda <HAL_RCC_OscConfig+0x44a>
 8001cf8:	e02e      	b.n	8001d58 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e029      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d11c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d115      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d2e:	4013      	ands	r3, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d10d      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d106      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40007000 	.word	0x40007000
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	42470060 	.word	0x42470060

08001d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0cc      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d84:	4b68      	ldr	r3, [pc, #416]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d90c      	bls.n	8001dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b65      	ldr	r3, [pc, #404]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0b8      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d020      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc4:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a58      	ldr	r2, [pc, #352]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ddc:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4a52      	ldr	r2, [pc, #328]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de8:	4b50      	ldr	r3, [pc, #320]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	494d      	ldr	r1, [pc, #308]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d044      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d119      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e07f      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d003      	beq.n	8001e2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2e:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d109      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e06f      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e067      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4e:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f023 0203 	bic.w	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4934      	ldr	r1, [pc, #208]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e60:	f7ff fa5c 	bl	800131c <HAL_GetTick>
 8001e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e68:	f7ff fa58 	bl	800131c <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e04f      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 020c 	and.w	r2, r3, #12
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d1eb      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d20c      	bcs.n	8001eb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e032      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4916      	ldr	r1, [pc, #88]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	490e      	ldr	r1, [pc, #56]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ef6:	f000 f821 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 8001efa:	4601      	mov	r1, r0
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	5cd3      	ldrb	r3, [r2, r3]
 8001f0a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff f9bc 	bl	8001294 <HAL_InitTick>

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023c00 	.word	0x40023c00
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	08003898 	.word	0x08003898
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000004 	.word	0x20000004

08001f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d007      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x32>
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d008      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0x38>
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 80b4 	bne.w	80020d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b5e      	ldr	r3, [pc, #376]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f6a:	60bb      	str	r3, [r7, #8]
       break;
 8001f6c:	e0b3      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f6e:	4b5e      	ldr	r3, [pc, #376]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f70:	60bb      	str	r3, [r7, #8]
      break;
 8001f72:	e0b0      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f74:	4b5a      	ldr	r3, [pc, #360]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f7e:	4b58      	ldr	r3, [pc, #352]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d04a      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f8a:	4b55      	ldr	r3, [pc, #340]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	099b      	lsrs	r3, r3, #6
 8001f90:	f04f 0400 	mov.w	r4, #0
 8001f94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	ea03 0501 	and.w	r5, r3, r1
 8001fa0:	ea04 0602 	and.w	r6, r4, r2
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	4632      	mov	r2, r6
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	f04f 0400 	mov.w	r4, #0
 8001fb0:	0154      	lsls	r4, r2, #5
 8001fb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fb6:	014b      	lsls	r3, r1, #5
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4622      	mov	r2, r4
 8001fbc:	1b49      	subs	r1, r1, r5
 8001fbe:	eb62 0206 	sbc.w	r2, r2, r6
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	f04f 0400 	mov.w	r4, #0
 8001fca:	0194      	lsls	r4, r2, #6
 8001fcc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fd0:	018b      	lsls	r3, r1, #6
 8001fd2:	1a5b      	subs	r3, r3, r1
 8001fd4:	eb64 0402 	sbc.w	r4, r4, r2
 8001fd8:	f04f 0100 	mov.w	r1, #0
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	00e2      	lsls	r2, r4, #3
 8001fe2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fe6:	00d9      	lsls	r1, r3, #3
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4614      	mov	r4, r2
 8001fec:	195b      	adds	r3, r3, r5
 8001fee:	eb44 0406 	adc.w	r4, r4, r6
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	0262      	lsls	r2, r4, #9
 8001ffc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002000:	0259      	lsls	r1, r3, #9
 8002002:	460b      	mov	r3, r1
 8002004:	4614      	mov	r4, r2
 8002006:	4618      	mov	r0, r3
 8002008:	4621      	mov	r1, r4
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f04f 0400 	mov.w	r4, #0
 8002010:	461a      	mov	r2, r3
 8002012:	4623      	mov	r3, r4
 8002014:	f7fe f9ee 	bl	80003f4 <__aeabi_uldivmod>
 8002018:	4603      	mov	r3, r0
 800201a:	460c      	mov	r4, r1
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	e049      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002020:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	f04f 0400 	mov.w	r4, #0
 800202a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	ea03 0501 	and.w	r5, r3, r1
 8002036:	ea04 0602 	and.w	r6, r4, r2
 800203a:	4629      	mov	r1, r5
 800203c:	4632      	mov	r2, r6
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	f04f 0400 	mov.w	r4, #0
 8002046:	0154      	lsls	r4, r2, #5
 8002048:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800204c:	014b      	lsls	r3, r1, #5
 800204e:	4619      	mov	r1, r3
 8002050:	4622      	mov	r2, r4
 8002052:	1b49      	subs	r1, r1, r5
 8002054:	eb62 0206 	sbc.w	r2, r2, r6
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	f04f 0400 	mov.w	r4, #0
 8002060:	0194      	lsls	r4, r2, #6
 8002062:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002066:	018b      	lsls	r3, r1, #6
 8002068:	1a5b      	subs	r3, r3, r1
 800206a:	eb64 0402 	sbc.w	r4, r4, r2
 800206e:	f04f 0100 	mov.w	r1, #0
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	00e2      	lsls	r2, r4, #3
 8002078:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800207c:	00d9      	lsls	r1, r3, #3
 800207e:	460b      	mov	r3, r1
 8002080:	4614      	mov	r4, r2
 8002082:	195b      	adds	r3, r3, r5
 8002084:	eb44 0406 	adc.w	r4, r4, r6
 8002088:	f04f 0100 	mov.w	r1, #0
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	02a2      	lsls	r2, r4, #10
 8002092:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002096:	0299      	lsls	r1, r3, #10
 8002098:	460b      	mov	r3, r1
 800209a:	4614      	mov	r4, r2
 800209c:	4618      	mov	r0, r3
 800209e:	4621      	mov	r1, r4
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f04f 0400 	mov.w	r4, #0
 80020a6:	461a      	mov	r2, r3
 80020a8:	4623      	mov	r3, r4
 80020aa:	f7fe f9a3 	bl	80003f4 <__aeabi_uldivmod>
 80020ae:	4603      	mov	r3, r0
 80020b0:	460c      	mov	r4, r1
 80020b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	0c1b      	lsrs	r3, r3, #16
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	3301      	adds	r3, #1
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020cc:	60bb      	str	r3, [r7, #8]
      break;
 80020ce:	e002      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020d2:	60bb      	str	r3, [r7, #8]
      break;
 80020d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d6:	68bb      	ldr	r3, [r7, #8]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	00f42400 	.word	0x00f42400
 80020e8:	007a1200 	.word	0x007a1200

080020ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_RCC_GetHCLKFreq+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000000 	.word	0x20000000

08002104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002108:	f7ff fff0 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 800210c:	4601      	mov	r1, r0
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	0a9b      	lsrs	r3, r3, #10
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	4a03      	ldr	r2, [pc, #12]	; (8002128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40023800 	.word	0x40023800
 8002128:	080038a8 	.word	0x080038a8

0800212c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002130:	f7ff ffdc 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 8002134:	4601      	mov	r1, r0
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0b5b      	lsrs	r3, r3, #13
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4a03      	ldr	r2, [pc, #12]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	080038a8 	.word	0x080038a8

08002154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e01d      	b.n	80021a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fee6 	bl	8000f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3304      	adds	r3, #4
 8002190:	4619      	mov	r1, r3
 8002192:	4610      	mov	r0, r2
 8002194:	f000 fc30 	bl	80029f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d007      	beq.n	80021dc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b06      	cmp	r3, #6
 800221a:	d007      	beq.n	800222c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e01d      	b.n	8002288 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d106      	bne.n	8002266 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f815 	bl	8002290 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2202      	movs	r2, #2
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	4619      	mov	r1, r3
 8002278:	4610      	mov	r0, r2
 800227a:	f000 fbbd 	bl	80029f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2201      	movs	r2, #1
 80022b4:	6839      	ldr	r1, [r7, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fe44 	bl	8002f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a10      	ldr	r2, [pc, #64]	; (8002304 <HAL_TIM_PWM_Start+0x60>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d107      	bne.n	80022d6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b06      	cmp	r3, #6
 80022e6:	d007      	beq.n	80022f8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40010000 	.word	0x40010000

08002308 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e083      	b.n	8002424 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d106      	bne.n	8002336 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7fe fdc3 	bl	8000ebc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2202      	movs	r2, #2
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800234c:	f023 0307 	bic.w	r3, r3, #7
 8002350:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3304      	adds	r3, #4
 800235a:	4619      	mov	r1, r3
 800235c:	4610      	mov	r0, r2
 800235e:	f000 fb4b 	bl	80029f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	4313      	orrs	r3, r2
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80023a8:	f023 030c 	bic.w	r3, r3, #12
 80023ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	4313      	orrs	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	011a      	lsls	r2, r3, #4
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	031b      	lsls	r3, r3, #12
 80023d8:	4313      	orrs	r3, r2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80023e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80023ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	4313      	orrs	r3, r2
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_TIM_Encoder_Start+0x16>
 800243c:	2b04      	cmp	r3, #4
 800243e:	d008      	beq.n	8002452 <HAL_TIM_Encoder_Start+0x26>
 8002440:	e00f      	b.n	8002462 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2201      	movs	r2, #1
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fd7a 	bl	8002f44 <TIM_CCxChannelCmd>
      break;
 8002450:	e016      	b.n	8002480 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2201      	movs	r2, #1
 8002458:	2104      	movs	r1, #4
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fd72 	bl	8002f44 <TIM_CCxChannelCmd>
      break;
 8002460:	e00e      	b.n	8002480 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2201      	movs	r2, #1
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fd6a 	bl	8002f44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2201      	movs	r2, #1
 8002476:	2104      	movs	r1, #4
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fd63 	bl	8002f44 <TIM_CCxChannelCmd>
      break;
 800247e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d122      	bne.n	80024f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d11b      	bne.n	80024f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f06f 0202 	mvn.w	r2, #2
 80024c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fa6c 	bl	80029ba <HAL_TIM_IC_CaptureCallback>
 80024e2:	e005      	b.n	80024f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fa5e 	bl	80029a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fa6f 	bl	80029ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b04      	cmp	r3, #4
 8002502:	d122      	bne.n	800254a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b04      	cmp	r3, #4
 8002510:	d11b      	bne.n	800254a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f06f 0204 	mvn.w	r2, #4
 800251a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fa42 	bl	80029ba <HAL_TIM_IC_CaptureCallback>
 8002536:	e005      	b.n	8002544 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fa34 	bl	80029a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fa45 	bl	80029ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b08      	cmp	r3, #8
 8002556:	d122      	bne.n	800259e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b08      	cmp	r3, #8
 8002564:	d11b      	bne.n	800259e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f06f 0208 	mvn.w	r2, #8
 800256e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2204      	movs	r2, #4
 8002574:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fa18 	bl	80029ba <HAL_TIM_IC_CaptureCallback>
 800258a:	e005      	b.n	8002598 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fa0a 	bl	80029a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fa1b 	bl	80029ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b10      	cmp	r3, #16
 80025aa:	d122      	bne.n	80025f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b10      	cmp	r3, #16
 80025b8:	d11b      	bne.n	80025f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f06f 0210 	mvn.w	r2, #16
 80025c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2208      	movs	r2, #8
 80025c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f9ee 	bl	80029ba <HAL_TIM_IC_CaptureCallback>
 80025de:	e005      	b.n	80025ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f9e0 	bl	80029a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f9f1 	bl	80029ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d10e      	bne.n	800261e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d107      	bne.n	800261e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f06f 0201 	mvn.w	r2, #1
 8002616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7fe fbed 	bl	8000df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002628:	2b80      	cmp	r3, #128	; 0x80
 800262a:	d10e      	bne.n	800264a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002636:	2b80      	cmp	r3, #128	; 0x80
 8002638:	d107      	bne.n	800264a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fd1b 	bl	8003080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	2b40      	cmp	r3, #64	; 0x40
 8002656:	d10e      	bne.n	8002676 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002662:	2b40      	cmp	r3, #64	; 0x40
 8002664:	d107      	bne.n	8002676 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800266e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f9b6 	bl	80029e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b20      	cmp	r3, #32
 8002682:	d10e      	bne.n	80026a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b20      	cmp	r3, #32
 8002690:	d107      	bne.n	80026a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f06f 0220 	mvn.w	r2, #32
 800269a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fce5 	bl	800306c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e0b4      	b.n	8002830 <HAL_TIM_PWM_ConfigChannel+0x184>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b0c      	cmp	r3, #12
 80026da:	f200 809f 	bhi.w	800281c <HAL_TIM_PWM_ConfigChannel+0x170>
 80026de:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	08002719 	.word	0x08002719
 80026e8:	0800281d 	.word	0x0800281d
 80026ec:	0800281d 	.word	0x0800281d
 80026f0:	0800281d 	.word	0x0800281d
 80026f4:	08002759 	.word	0x08002759
 80026f8:	0800281d 	.word	0x0800281d
 80026fc:	0800281d 	.word	0x0800281d
 8002700:	0800281d 	.word	0x0800281d
 8002704:	0800279b 	.word	0x0800279b
 8002708:	0800281d 	.word	0x0800281d
 800270c:	0800281d 	.word	0x0800281d
 8002710:	0800281d 	.word	0x0800281d
 8002714:	080027db 	.word	0x080027db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f9ea 	bl	8002af8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0208 	orr.w	r2, r2, #8
 8002732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0204 	bic.w	r2, r2, #4
 8002742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6999      	ldr	r1, [r3, #24]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	619a      	str	r2, [r3, #24]
      break;
 8002756:	e062      	b.n	800281e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fa30 	bl	8002bc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6999      	ldr	r1, [r3, #24]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	021a      	lsls	r2, r3, #8
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	619a      	str	r2, [r3, #24]
      break;
 8002798:	e041      	b.n	800281e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fa7b 	bl	8002c9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0208 	orr.w	r2, r2, #8
 80027b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0204 	bic.w	r2, r2, #4
 80027c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69d9      	ldr	r1, [r3, #28]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	61da      	str	r2, [r3, #28]
      break;
 80027d8:	e021      	b.n	800281e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fac5 	bl	8002d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69d9      	ldr	r1, [r3, #28]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	021a      	lsls	r2, r3, #8
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	61da      	str	r2, [r3, #28]
      break;
 800281a:	e000      	b.n	800281e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800281c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_TIM_ConfigClockSource+0x18>
 800284c:	2302      	movs	r3, #2
 800284e:	e0a6      	b.n	800299e <HAL_TIM_ConfigClockSource+0x166>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800286e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002876:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b40      	cmp	r3, #64	; 0x40
 8002886:	d067      	beq.n	8002958 <HAL_TIM_ConfigClockSource+0x120>
 8002888:	2b40      	cmp	r3, #64	; 0x40
 800288a:	d80b      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x6c>
 800288c:	2b10      	cmp	r3, #16
 800288e:	d073      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0x140>
 8002890:	2b10      	cmp	r3, #16
 8002892:	d802      	bhi.n	800289a <HAL_TIM_ConfigClockSource+0x62>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d06f      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002898:	e078      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800289a:	2b20      	cmp	r3, #32
 800289c:	d06c      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0x140>
 800289e:	2b30      	cmp	r3, #48	; 0x30
 80028a0:	d06a      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80028a2:	e073      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028a4:	2b70      	cmp	r3, #112	; 0x70
 80028a6:	d00d      	beq.n	80028c4 <HAL_TIM_ConfigClockSource+0x8c>
 80028a8:	2b70      	cmp	r3, #112	; 0x70
 80028aa:	d804      	bhi.n	80028b6 <HAL_TIM_ConfigClockSource+0x7e>
 80028ac:	2b50      	cmp	r3, #80	; 0x50
 80028ae:	d033      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0xe0>
 80028b0:	2b60      	cmp	r3, #96	; 0x60
 80028b2:	d041      	beq.n	8002938 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80028b4:	e06a      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ba:	d066      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x152>
 80028bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c0:	d017      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80028c2:	e063      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	6899      	ldr	r1, [r3, #8]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f000 fb16 	bl	8002f04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	609a      	str	r2, [r3, #8]
      break;
 80028f0:	e04c      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6899      	ldr	r1, [r3, #8]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f000 faff 	bl	8002f04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002914:	609a      	str	r2, [r3, #8]
      break;
 8002916:	e039      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	461a      	mov	r2, r3
 8002926:	f000 fa73 	bl	8002e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2150      	movs	r1, #80	; 0x50
 8002930:	4618      	mov	r0, r3
 8002932:	f000 facc 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002936:	e029      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	461a      	mov	r2, r3
 8002946:	f000 fa92 	bl	8002e6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2160      	movs	r1, #96	; 0x60
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fabc 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002956:	e019      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	461a      	mov	r2, r3
 8002966:	f000 fa53 	bl	8002e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2140      	movs	r1, #64	; 0x40
 8002970:	4618      	mov	r0, r3
 8002972:	f000 faac 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002976:	e009      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4619      	mov	r1, r3
 8002982:	4610      	mov	r0, r2
 8002984:	f000 faa3 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002988:	e000      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800298a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a34      	ldr	r2, [pc, #208]	; (8002adc <TIM_Base_SetConfig+0xe4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00f      	beq.n	8002a30 <TIM_Base_SetConfig+0x38>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a16:	d00b      	beq.n	8002a30 <TIM_Base_SetConfig+0x38>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a31      	ldr	r2, [pc, #196]	; (8002ae0 <TIM_Base_SetConfig+0xe8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d007      	beq.n	8002a30 <TIM_Base_SetConfig+0x38>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a30      	ldr	r2, [pc, #192]	; (8002ae4 <TIM_Base_SetConfig+0xec>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d003      	beq.n	8002a30 <TIM_Base_SetConfig+0x38>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a2f      	ldr	r2, [pc, #188]	; (8002ae8 <TIM_Base_SetConfig+0xf0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d108      	bne.n	8002a42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a25      	ldr	r2, [pc, #148]	; (8002adc <TIM_Base_SetConfig+0xe4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01b      	beq.n	8002a82 <TIM_Base_SetConfig+0x8a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a50:	d017      	beq.n	8002a82 <TIM_Base_SetConfig+0x8a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a22      	ldr	r2, [pc, #136]	; (8002ae0 <TIM_Base_SetConfig+0xe8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <TIM_Base_SetConfig+0x8a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a21      	ldr	r2, [pc, #132]	; (8002ae4 <TIM_Base_SetConfig+0xec>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00f      	beq.n	8002a82 <TIM_Base_SetConfig+0x8a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a20      	ldr	r2, [pc, #128]	; (8002ae8 <TIM_Base_SetConfig+0xf0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00b      	beq.n	8002a82 <TIM_Base_SetConfig+0x8a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <TIM_Base_SetConfig+0xf4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d007      	beq.n	8002a82 <TIM_Base_SetConfig+0x8a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a1e      	ldr	r2, [pc, #120]	; (8002af0 <TIM_Base_SetConfig+0xf8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d003      	beq.n	8002a82 <TIM_Base_SetConfig+0x8a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <TIM_Base_SetConfig+0xfc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d108      	bne.n	8002a94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a08      	ldr	r2, [pc, #32]	; (8002adc <TIM_Base_SetConfig+0xe4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d103      	bne.n	8002ac8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	615a      	str	r2, [r3, #20]
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40000800 	.word	0x40000800
 8002ae8:	40000c00 	.word	0x40000c00
 8002aec:	40014000 	.word	0x40014000
 8002af0:	40014400 	.word	0x40014400
 8002af4:	40014800 	.word	0x40014800

08002af8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f023 0201 	bic.w	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0303 	bic.w	r3, r3, #3
 8002b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f023 0302 	bic.w	r3, r3, #2
 8002b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <TIM_OC1_SetConfig+0xc8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d10c      	bne.n	8002b6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f023 0308 	bic.w	r3, r3, #8
 8002b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <TIM_OC1_SetConfig+0xc8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d111      	bne.n	8002b9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	621a      	str	r2, [r3, #32]
}
 8002bb4:	bf00      	nop
 8002bb6:	371c      	adds	r7, #28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	40010000 	.word	0x40010000

08002bc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	f023 0210 	bic.w	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f023 0320 	bic.w	r3, r3, #32
 8002c0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <TIM_OC2_SetConfig+0xd4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d10d      	bne.n	8002c40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a15      	ldr	r2, [pc, #84]	; (8002c98 <TIM_OC2_SetConfig+0xd4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d113      	bne.n	8002c70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	621a      	str	r2, [r3, #32]
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40010000 	.word	0x40010000

08002c9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0303 	bic.w	r3, r3, #3
 8002cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <TIM_OC3_SetConfig+0xd0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d10d      	bne.n	8002d16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <TIM_OC3_SetConfig+0xd0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d113      	bne.n	8002d46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	621a      	str	r2, [r3, #32]
}
 8002d60:	bf00      	nop
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	40010000 	.word	0x40010000

08002d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	031b      	lsls	r3, r3, #12
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <TIM_OC4_SetConfig+0x9c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d109      	bne.n	8002de4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	019b      	lsls	r3, r3, #6
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	621a      	str	r2, [r3, #32]
}
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40010000 	.word	0x40010000

08002e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f023 0201 	bic.w	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f023 030a 	bic.w	r3, r3, #10
 8002e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	621a      	str	r2, [r3, #32]
}
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b087      	sub	sp, #28
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	f023 0210 	bic.w	r2, r3, #16
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	031b      	lsls	r3, r3, #12
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002eaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	621a      	str	r2, [r3, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f043 0307 	orr.w	r3, r3, #7
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	609a      	str	r2, [r3, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	021a      	lsls	r2, r3, #8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	609a      	str	r2, [r3, #8]
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	2201      	movs	r2, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a1a      	ldr	r2, [r3, #32]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a1a      	ldr	r2, [r3, #32]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	621a      	str	r2, [r3, #32]
}
 8002f82:	bf00      	nop
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e050      	b.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d018      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff4:	d013      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a18      	ldr	r2, [pc, #96]	; (800305c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00e      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a16      	ldr	r2, [pc, #88]	; (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a15      	ldr	r2, [pc, #84]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a13      	ldr	r2, [pc, #76]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10c      	bne.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	4313      	orrs	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40010000 	.word	0x40010000
 800305c:	40000400 	.word	0x40000400
 8003060:	40000800 	.word	0x40000800
 8003064:	40000c00 	.word	0x40000c00
 8003068:	40014000 	.word	0x40014000

0800306c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e03f      	b.n	8003126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fe f802 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2224      	movs	r2, #36	; 0x24
 80030c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f829 	bl	8003130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800310c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003172:	f023 030c 	bic.w	r3, r3, #12
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	68f9      	ldr	r1, [r7, #12]
 800317c:	430b      	orrs	r3, r1
 800317e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319e:	f040 818b 	bne.w	80034b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4ac1      	ldr	r2, [pc, #772]	; (80034ac <UART_SetConfig+0x37c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d005      	beq.n	80031b8 <UART_SetConfig+0x88>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4abf      	ldr	r2, [pc, #764]	; (80034b0 <UART_SetConfig+0x380>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	f040 80bd 	bne.w	8003332 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031b8:	f7fe ffb8 	bl	800212c <HAL_RCC_GetPCLK2Freq>
 80031bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	461d      	mov	r5, r3
 80031c2:	f04f 0600 	mov.w	r6, #0
 80031c6:	46a8      	mov	r8, r5
 80031c8:	46b1      	mov	r9, r6
 80031ca:	eb18 0308 	adds.w	r3, r8, r8
 80031ce:	eb49 0409 	adc.w	r4, r9, r9
 80031d2:	4698      	mov	r8, r3
 80031d4:	46a1      	mov	r9, r4
 80031d6:	eb18 0805 	adds.w	r8, r8, r5
 80031da:	eb49 0906 	adc.w	r9, r9, r6
 80031de:	f04f 0100 	mov.w	r1, #0
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031f2:	4688      	mov	r8, r1
 80031f4:	4691      	mov	r9, r2
 80031f6:	eb18 0005 	adds.w	r0, r8, r5
 80031fa:	eb49 0106 	adc.w	r1, r9, r6
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	461d      	mov	r5, r3
 8003204:	f04f 0600 	mov.w	r6, #0
 8003208:	196b      	adds	r3, r5, r5
 800320a:	eb46 0406 	adc.w	r4, r6, r6
 800320e:	461a      	mov	r2, r3
 8003210:	4623      	mov	r3, r4
 8003212:	f7fd f8ef 	bl	80003f4 <__aeabi_uldivmod>
 8003216:	4603      	mov	r3, r0
 8003218:	460c      	mov	r4, r1
 800321a:	461a      	mov	r2, r3
 800321c:	4ba5      	ldr	r3, [pc, #660]	; (80034b4 <UART_SetConfig+0x384>)
 800321e:	fba3 2302 	umull	r2, r3, r3, r2
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	461d      	mov	r5, r3
 800322c:	f04f 0600 	mov.w	r6, #0
 8003230:	46a9      	mov	r9, r5
 8003232:	46b2      	mov	sl, r6
 8003234:	eb19 0309 	adds.w	r3, r9, r9
 8003238:	eb4a 040a 	adc.w	r4, sl, sl
 800323c:	4699      	mov	r9, r3
 800323e:	46a2      	mov	sl, r4
 8003240:	eb19 0905 	adds.w	r9, r9, r5
 8003244:	eb4a 0a06 	adc.w	sl, sl, r6
 8003248:	f04f 0100 	mov.w	r1, #0
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003254:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003258:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800325c:	4689      	mov	r9, r1
 800325e:	4692      	mov	sl, r2
 8003260:	eb19 0005 	adds.w	r0, r9, r5
 8003264:	eb4a 0106 	adc.w	r1, sl, r6
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	461d      	mov	r5, r3
 800326e:	f04f 0600 	mov.w	r6, #0
 8003272:	196b      	adds	r3, r5, r5
 8003274:	eb46 0406 	adc.w	r4, r6, r6
 8003278:	461a      	mov	r2, r3
 800327a:	4623      	mov	r3, r4
 800327c:	f7fd f8ba 	bl	80003f4 <__aeabi_uldivmod>
 8003280:	4603      	mov	r3, r0
 8003282:	460c      	mov	r4, r1
 8003284:	461a      	mov	r2, r3
 8003286:	4b8b      	ldr	r3, [pc, #556]	; (80034b4 <UART_SetConfig+0x384>)
 8003288:	fba3 1302 	umull	r1, r3, r3, r2
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	2164      	movs	r1, #100	; 0x64
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	3332      	adds	r3, #50	; 0x32
 800329a:	4a86      	ldr	r2, [pc, #536]	; (80034b4 <UART_SetConfig+0x384>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032a8:	4498      	add	r8, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	461d      	mov	r5, r3
 80032ae:	f04f 0600 	mov.w	r6, #0
 80032b2:	46a9      	mov	r9, r5
 80032b4:	46b2      	mov	sl, r6
 80032b6:	eb19 0309 	adds.w	r3, r9, r9
 80032ba:	eb4a 040a 	adc.w	r4, sl, sl
 80032be:	4699      	mov	r9, r3
 80032c0:	46a2      	mov	sl, r4
 80032c2:	eb19 0905 	adds.w	r9, r9, r5
 80032c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80032ca:	f04f 0100 	mov.w	r1, #0
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032de:	4689      	mov	r9, r1
 80032e0:	4692      	mov	sl, r2
 80032e2:	eb19 0005 	adds.w	r0, r9, r5
 80032e6:	eb4a 0106 	adc.w	r1, sl, r6
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	461d      	mov	r5, r3
 80032f0:	f04f 0600 	mov.w	r6, #0
 80032f4:	196b      	adds	r3, r5, r5
 80032f6:	eb46 0406 	adc.w	r4, r6, r6
 80032fa:	461a      	mov	r2, r3
 80032fc:	4623      	mov	r3, r4
 80032fe:	f7fd f879 	bl	80003f4 <__aeabi_uldivmod>
 8003302:	4603      	mov	r3, r0
 8003304:	460c      	mov	r4, r1
 8003306:	461a      	mov	r2, r3
 8003308:	4b6a      	ldr	r3, [pc, #424]	; (80034b4 <UART_SetConfig+0x384>)
 800330a:	fba3 1302 	umull	r1, r3, r3, r2
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2164      	movs	r1, #100	; 0x64
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	3332      	adds	r3, #50	; 0x32
 800331c:	4a65      	ldr	r2, [pc, #404]	; (80034b4 <UART_SetConfig+0x384>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	f003 0207 	and.w	r2, r3, #7
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4442      	add	r2, r8
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	e26f      	b.n	8003812 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003332:	f7fe fee7 	bl	8002104 <HAL_RCC_GetPCLK1Freq>
 8003336:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	461d      	mov	r5, r3
 800333c:	f04f 0600 	mov.w	r6, #0
 8003340:	46a8      	mov	r8, r5
 8003342:	46b1      	mov	r9, r6
 8003344:	eb18 0308 	adds.w	r3, r8, r8
 8003348:	eb49 0409 	adc.w	r4, r9, r9
 800334c:	4698      	mov	r8, r3
 800334e:	46a1      	mov	r9, r4
 8003350:	eb18 0805 	adds.w	r8, r8, r5
 8003354:	eb49 0906 	adc.w	r9, r9, r6
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003364:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003368:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800336c:	4688      	mov	r8, r1
 800336e:	4691      	mov	r9, r2
 8003370:	eb18 0005 	adds.w	r0, r8, r5
 8003374:	eb49 0106 	adc.w	r1, r9, r6
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	461d      	mov	r5, r3
 800337e:	f04f 0600 	mov.w	r6, #0
 8003382:	196b      	adds	r3, r5, r5
 8003384:	eb46 0406 	adc.w	r4, r6, r6
 8003388:	461a      	mov	r2, r3
 800338a:	4623      	mov	r3, r4
 800338c:	f7fd f832 	bl	80003f4 <__aeabi_uldivmod>
 8003390:	4603      	mov	r3, r0
 8003392:	460c      	mov	r4, r1
 8003394:	461a      	mov	r2, r3
 8003396:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <UART_SetConfig+0x384>)
 8003398:	fba3 2302 	umull	r2, r3, r3, r2
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	461d      	mov	r5, r3
 80033a6:	f04f 0600 	mov.w	r6, #0
 80033aa:	46a9      	mov	r9, r5
 80033ac:	46b2      	mov	sl, r6
 80033ae:	eb19 0309 	adds.w	r3, r9, r9
 80033b2:	eb4a 040a 	adc.w	r4, sl, sl
 80033b6:	4699      	mov	r9, r3
 80033b8:	46a2      	mov	sl, r4
 80033ba:	eb19 0905 	adds.w	r9, r9, r5
 80033be:	eb4a 0a06 	adc.w	sl, sl, r6
 80033c2:	f04f 0100 	mov.w	r1, #0
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033d6:	4689      	mov	r9, r1
 80033d8:	4692      	mov	sl, r2
 80033da:	eb19 0005 	adds.w	r0, r9, r5
 80033de:	eb4a 0106 	adc.w	r1, sl, r6
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	461d      	mov	r5, r3
 80033e8:	f04f 0600 	mov.w	r6, #0
 80033ec:	196b      	adds	r3, r5, r5
 80033ee:	eb46 0406 	adc.w	r4, r6, r6
 80033f2:	461a      	mov	r2, r3
 80033f4:	4623      	mov	r3, r4
 80033f6:	f7fc fffd 	bl	80003f4 <__aeabi_uldivmod>
 80033fa:	4603      	mov	r3, r0
 80033fc:	460c      	mov	r4, r1
 80033fe:	461a      	mov	r2, r3
 8003400:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <UART_SetConfig+0x384>)
 8003402:	fba3 1302 	umull	r1, r3, r3, r2
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2164      	movs	r1, #100	; 0x64
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	3332      	adds	r3, #50	; 0x32
 8003414:	4a27      	ldr	r2, [pc, #156]	; (80034b4 <UART_SetConfig+0x384>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003422:	4498      	add	r8, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	461d      	mov	r5, r3
 8003428:	f04f 0600 	mov.w	r6, #0
 800342c:	46a9      	mov	r9, r5
 800342e:	46b2      	mov	sl, r6
 8003430:	eb19 0309 	adds.w	r3, r9, r9
 8003434:	eb4a 040a 	adc.w	r4, sl, sl
 8003438:	4699      	mov	r9, r3
 800343a:	46a2      	mov	sl, r4
 800343c:	eb19 0905 	adds.w	r9, r9, r5
 8003440:	eb4a 0a06 	adc.w	sl, sl, r6
 8003444:	f04f 0100 	mov.w	r1, #0
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003450:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003454:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003458:	4689      	mov	r9, r1
 800345a:	4692      	mov	sl, r2
 800345c:	eb19 0005 	adds.w	r0, r9, r5
 8003460:	eb4a 0106 	adc.w	r1, sl, r6
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	461d      	mov	r5, r3
 800346a:	f04f 0600 	mov.w	r6, #0
 800346e:	196b      	adds	r3, r5, r5
 8003470:	eb46 0406 	adc.w	r4, r6, r6
 8003474:	461a      	mov	r2, r3
 8003476:	4623      	mov	r3, r4
 8003478:	f7fc ffbc 	bl	80003f4 <__aeabi_uldivmod>
 800347c:	4603      	mov	r3, r0
 800347e:	460c      	mov	r4, r1
 8003480:	461a      	mov	r2, r3
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <UART_SetConfig+0x384>)
 8003484:	fba3 1302 	umull	r1, r3, r3, r2
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	2164      	movs	r1, #100	; 0x64
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	3332      	adds	r3, #50	; 0x32
 8003496:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <UART_SetConfig+0x384>)
 8003498:	fba2 2303 	umull	r2, r3, r2, r3
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	f003 0207 	and.w	r2, r3, #7
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4442      	add	r2, r8
 80034a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80034aa:	e1b2      	b.n	8003812 <UART_SetConfig+0x6e2>
 80034ac:	40011000 	.word	0x40011000
 80034b0:	40011400 	.word	0x40011400
 80034b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4ad7      	ldr	r2, [pc, #860]	; (800381c <UART_SetConfig+0x6ec>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d005      	beq.n	80034ce <UART_SetConfig+0x39e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4ad6      	ldr	r2, [pc, #856]	; (8003820 <UART_SetConfig+0x6f0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	f040 80d1 	bne.w	8003670 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80034ce:	f7fe fe2d 	bl	800212c <HAL_RCC_GetPCLK2Freq>
 80034d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	469a      	mov	sl, r3
 80034d8:	f04f 0b00 	mov.w	fp, #0
 80034dc:	46d0      	mov	r8, sl
 80034de:	46d9      	mov	r9, fp
 80034e0:	eb18 0308 	adds.w	r3, r8, r8
 80034e4:	eb49 0409 	adc.w	r4, r9, r9
 80034e8:	4698      	mov	r8, r3
 80034ea:	46a1      	mov	r9, r4
 80034ec:	eb18 080a 	adds.w	r8, r8, sl
 80034f0:	eb49 090b 	adc.w	r9, r9, fp
 80034f4:	f04f 0100 	mov.w	r1, #0
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003500:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003504:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003508:	4688      	mov	r8, r1
 800350a:	4691      	mov	r9, r2
 800350c:	eb1a 0508 	adds.w	r5, sl, r8
 8003510:	eb4b 0609 	adc.w	r6, fp, r9
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4619      	mov	r1, r3
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	f04f 0400 	mov.w	r4, #0
 8003526:	0094      	lsls	r4, r2, #2
 8003528:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800352c:	008b      	lsls	r3, r1, #2
 800352e:	461a      	mov	r2, r3
 8003530:	4623      	mov	r3, r4
 8003532:	4628      	mov	r0, r5
 8003534:	4631      	mov	r1, r6
 8003536:	f7fc ff5d 	bl	80003f4 <__aeabi_uldivmod>
 800353a:	4603      	mov	r3, r0
 800353c:	460c      	mov	r4, r1
 800353e:	461a      	mov	r2, r3
 8003540:	4bb8      	ldr	r3, [pc, #736]	; (8003824 <UART_SetConfig+0x6f4>)
 8003542:	fba3 2302 	umull	r2, r3, r3, r2
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	469b      	mov	fp, r3
 8003550:	f04f 0c00 	mov.w	ip, #0
 8003554:	46d9      	mov	r9, fp
 8003556:	46e2      	mov	sl, ip
 8003558:	eb19 0309 	adds.w	r3, r9, r9
 800355c:	eb4a 040a 	adc.w	r4, sl, sl
 8003560:	4699      	mov	r9, r3
 8003562:	46a2      	mov	sl, r4
 8003564:	eb19 090b 	adds.w	r9, r9, fp
 8003568:	eb4a 0a0c 	adc.w	sl, sl, ip
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003578:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800357c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003580:	4689      	mov	r9, r1
 8003582:	4692      	mov	sl, r2
 8003584:	eb1b 0509 	adds.w	r5, fp, r9
 8003588:	eb4c 060a 	adc.w	r6, ip, sl
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4619      	mov	r1, r3
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	f04f 0400 	mov.w	r4, #0
 800359e:	0094      	lsls	r4, r2, #2
 80035a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035a4:	008b      	lsls	r3, r1, #2
 80035a6:	461a      	mov	r2, r3
 80035a8:	4623      	mov	r3, r4
 80035aa:	4628      	mov	r0, r5
 80035ac:	4631      	mov	r1, r6
 80035ae:	f7fc ff21 	bl	80003f4 <__aeabi_uldivmod>
 80035b2:	4603      	mov	r3, r0
 80035b4:	460c      	mov	r4, r1
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b9a      	ldr	r3, [pc, #616]	; (8003824 <UART_SetConfig+0x6f4>)
 80035ba:	fba3 1302 	umull	r1, r3, r3, r2
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	2164      	movs	r1, #100	; 0x64
 80035c2:	fb01 f303 	mul.w	r3, r1, r3
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	3332      	adds	r3, #50	; 0x32
 80035cc:	4a95      	ldr	r2, [pc, #596]	; (8003824 <UART_SetConfig+0x6f4>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d8:	4498      	add	r8, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	469b      	mov	fp, r3
 80035de:	f04f 0c00 	mov.w	ip, #0
 80035e2:	46d9      	mov	r9, fp
 80035e4:	46e2      	mov	sl, ip
 80035e6:	eb19 0309 	adds.w	r3, r9, r9
 80035ea:	eb4a 040a 	adc.w	r4, sl, sl
 80035ee:	4699      	mov	r9, r3
 80035f0:	46a2      	mov	sl, r4
 80035f2:	eb19 090b 	adds.w	r9, r9, fp
 80035f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003606:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800360a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800360e:	4689      	mov	r9, r1
 8003610:	4692      	mov	sl, r2
 8003612:	eb1b 0509 	adds.w	r5, fp, r9
 8003616:	eb4c 060a 	adc.w	r6, ip, sl
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4619      	mov	r1, r3
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	f04f 0400 	mov.w	r4, #0
 800362c:	0094      	lsls	r4, r2, #2
 800362e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003632:	008b      	lsls	r3, r1, #2
 8003634:	461a      	mov	r2, r3
 8003636:	4623      	mov	r3, r4
 8003638:	4628      	mov	r0, r5
 800363a:	4631      	mov	r1, r6
 800363c:	f7fc feda 	bl	80003f4 <__aeabi_uldivmod>
 8003640:	4603      	mov	r3, r0
 8003642:	460c      	mov	r4, r1
 8003644:	461a      	mov	r2, r3
 8003646:	4b77      	ldr	r3, [pc, #476]	; (8003824 <UART_SetConfig+0x6f4>)
 8003648:	fba3 1302 	umull	r1, r3, r3, r2
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	2164      	movs	r1, #100	; 0x64
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	3332      	adds	r3, #50	; 0x32
 800365a:	4a72      	ldr	r2, [pc, #456]	; (8003824 <UART_SetConfig+0x6f4>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	f003 020f 	and.w	r2, r3, #15
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4442      	add	r2, r8
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	e0d0      	b.n	8003812 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003670:	f7fe fd48 	bl	8002104 <HAL_RCC_GetPCLK1Freq>
 8003674:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	469a      	mov	sl, r3
 800367a:	f04f 0b00 	mov.w	fp, #0
 800367e:	46d0      	mov	r8, sl
 8003680:	46d9      	mov	r9, fp
 8003682:	eb18 0308 	adds.w	r3, r8, r8
 8003686:	eb49 0409 	adc.w	r4, r9, r9
 800368a:	4698      	mov	r8, r3
 800368c:	46a1      	mov	r9, r4
 800368e:	eb18 080a 	adds.w	r8, r8, sl
 8003692:	eb49 090b 	adc.w	r9, r9, fp
 8003696:	f04f 0100 	mov.w	r1, #0
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036aa:	4688      	mov	r8, r1
 80036ac:	4691      	mov	r9, r2
 80036ae:	eb1a 0508 	adds.w	r5, sl, r8
 80036b2:	eb4b 0609 	adc.w	r6, fp, r9
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4619      	mov	r1, r3
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	f04f 0400 	mov.w	r4, #0
 80036c8:	0094      	lsls	r4, r2, #2
 80036ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036ce:	008b      	lsls	r3, r1, #2
 80036d0:	461a      	mov	r2, r3
 80036d2:	4623      	mov	r3, r4
 80036d4:	4628      	mov	r0, r5
 80036d6:	4631      	mov	r1, r6
 80036d8:	f7fc fe8c 	bl	80003f4 <__aeabi_uldivmod>
 80036dc:	4603      	mov	r3, r0
 80036de:	460c      	mov	r4, r1
 80036e0:	461a      	mov	r2, r3
 80036e2:	4b50      	ldr	r3, [pc, #320]	; (8003824 <UART_SetConfig+0x6f4>)
 80036e4:	fba3 2302 	umull	r2, r3, r3, r2
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	469b      	mov	fp, r3
 80036f2:	f04f 0c00 	mov.w	ip, #0
 80036f6:	46d9      	mov	r9, fp
 80036f8:	46e2      	mov	sl, ip
 80036fa:	eb19 0309 	adds.w	r3, r9, r9
 80036fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003702:	4699      	mov	r9, r3
 8003704:	46a2      	mov	sl, r4
 8003706:	eb19 090b 	adds.w	r9, r9, fp
 800370a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800370e:	f04f 0100 	mov.w	r1, #0
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800371a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800371e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003722:	4689      	mov	r9, r1
 8003724:	4692      	mov	sl, r2
 8003726:	eb1b 0509 	adds.w	r5, fp, r9
 800372a:	eb4c 060a 	adc.w	r6, ip, sl
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4619      	mov	r1, r3
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	f04f 0400 	mov.w	r4, #0
 8003740:	0094      	lsls	r4, r2, #2
 8003742:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003746:	008b      	lsls	r3, r1, #2
 8003748:	461a      	mov	r2, r3
 800374a:	4623      	mov	r3, r4
 800374c:	4628      	mov	r0, r5
 800374e:	4631      	mov	r1, r6
 8003750:	f7fc fe50 	bl	80003f4 <__aeabi_uldivmod>
 8003754:	4603      	mov	r3, r0
 8003756:	460c      	mov	r4, r1
 8003758:	461a      	mov	r2, r3
 800375a:	4b32      	ldr	r3, [pc, #200]	; (8003824 <UART_SetConfig+0x6f4>)
 800375c:	fba3 1302 	umull	r1, r3, r3, r2
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	2164      	movs	r1, #100	; 0x64
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	3332      	adds	r3, #50	; 0x32
 800376e:	4a2d      	ldr	r2, [pc, #180]	; (8003824 <UART_SetConfig+0x6f4>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377a:	4498      	add	r8, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	469b      	mov	fp, r3
 8003780:	f04f 0c00 	mov.w	ip, #0
 8003784:	46d9      	mov	r9, fp
 8003786:	46e2      	mov	sl, ip
 8003788:	eb19 0309 	adds.w	r3, r9, r9
 800378c:	eb4a 040a 	adc.w	r4, sl, sl
 8003790:	4699      	mov	r9, r3
 8003792:	46a2      	mov	sl, r4
 8003794:	eb19 090b 	adds.w	r9, r9, fp
 8003798:	eb4a 0a0c 	adc.w	sl, sl, ip
 800379c:	f04f 0100 	mov.w	r1, #0
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037b0:	4689      	mov	r9, r1
 80037b2:	4692      	mov	sl, r2
 80037b4:	eb1b 0509 	adds.w	r5, fp, r9
 80037b8:	eb4c 060a 	adc.w	r6, ip, sl
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4619      	mov	r1, r3
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	f04f 0400 	mov.w	r4, #0
 80037ce:	0094      	lsls	r4, r2, #2
 80037d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037d4:	008b      	lsls	r3, r1, #2
 80037d6:	461a      	mov	r2, r3
 80037d8:	4623      	mov	r3, r4
 80037da:	4628      	mov	r0, r5
 80037dc:	4631      	mov	r1, r6
 80037de:	f7fc fe09 	bl	80003f4 <__aeabi_uldivmod>
 80037e2:	4603      	mov	r3, r0
 80037e4:	460c      	mov	r4, r1
 80037e6:	461a      	mov	r2, r3
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <UART_SetConfig+0x6f4>)
 80037ea:	fba3 1302 	umull	r1, r3, r3, r2
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2164      	movs	r1, #100	; 0x64
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	3332      	adds	r3, #50	; 0x32
 80037fc:	4a09      	ldr	r2, [pc, #36]	; (8003824 <UART_SetConfig+0x6f4>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	f003 020f 	and.w	r2, r3, #15
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4442      	add	r2, r8
 800380e:	609a      	str	r2, [r3, #8]
}
 8003810:	e7ff      	b.n	8003812 <UART_SetConfig+0x6e2>
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800381c:	40011000 	.word	0x40011000
 8003820:	40011400 	.word	0x40011400
 8003824:	51eb851f 	.word	0x51eb851f

08003828 <__libc_init_array>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	4e0d      	ldr	r6, [pc, #52]	; (8003860 <__libc_init_array+0x38>)
 800382c:	4c0d      	ldr	r4, [pc, #52]	; (8003864 <__libc_init_array+0x3c>)
 800382e:	1ba4      	subs	r4, r4, r6
 8003830:	10a4      	asrs	r4, r4, #2
 8003832:	2500      	movs	r5, #0
 8003834:	42a5      	cmp	r5, r4
 8003836:	d109      	bne.n	800384c <__libc_init_array+0x24>
 8003838:	4e0b      	ldr	r6, [pc, #44]	; (8003868 <__libc_init_array+0x40>)
 800383a:	4c0c      	ldr	r4, [pc, #48]	; (800386c <__libc_init_array+0x44>)
 800383c:	f000 f820 	bl	8003880 <_init>
 8003840:	1ba4      	subs	r4, r4, r6
 8003842:	10a4      	asrs	r4, r4, #2
 8003844:	2500      	movs	r5, #0
 8003846:	42a5      	cmp	r5, r4
 8003848:	d105      	bne.n	8003856 <__libc_init_array+0x2e>
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003850:	4798      	blx	r3
 8003852:	3501      	adds	r5, #1
 8003854:	e7ee      	b.n	8003834 <__libc_init_array+0xc>
 8003856:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800385a:	4798      	blx	r3
 800385c:	3501      	adds	r5, #1
 800385e:	e7f2      	b.n	8003846 <__libc_init_array+0x1e>
 8003860:	080038b8 	.word	0x080038b8
 8003864:	080038b8 	.word	0x080038b8
 8003868:	080038b8 	.word	0x080038b8
 800386c:	080038bc 	.word	0x080038bc

08003870 <memset>:
 8003870:	4402      	add	r2, r0
 8003872:	4603      	mov	r3, r0
 8003874:	4293      	cmp	r3, r2
 8003876:	d100      	bne.n	800387a <memset+0xa>
 8003878:	4770      	bx	lr
 800387a:	f803 1b01 	strb.w	r1, [r3], #1
 800387e:	e7f9      	b.n	8003874 <memset+0x4>

08003880 <_init>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	bf00      	nop
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr

0800388c <_fini>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	bf00      	nop
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr
